module gpu_svm 
    use cudafor
    use cublas
    real, dimension(:,:), allocatable :: kernel_matrix
    integer, managed:: rows, features, max_iter,num_cudathreads, type
    real, managed :: learning_rate, C
    contains
    attributes(device) subroutine gpu_kernel(x_i, x_j, transform)
        ! integer, device, intent(in)::  type
        real, device, dimension(:) , intent(in):: x_i, x_j
        real, device, intent(out) :: transform
        real, device:: temp
        select case (type)
            !linear kernel x_i^T * x_j
            case(0)
                transform = dot_product(x_i,x_j)
            ! polynomial kernel (x_i^T * x_j)^2
            case(1)
                temp = (dot_product(x_i,x_j) + 1)
                transform = temp * temp * temp
            case default
                ! print*, "ERROR: NOT SUPPORTED KERNEL TYPE"
                ! call exit(0)
        end select
        return
    end subroutine

    subroutine kernel(x_i, x_j, type, transform)
        integer, intent(in)::  type
        real, dimension(:) , intent(in):: x_i, x_j
        real, intent(out) :: transform
        real :: temp
        select case (type)
            !linear kernel x_i^T * x_j
            case(0)
                transform = dot_product(x_i,x_j)
            ! polynomial kernel (x_i^T * x_j)^2
            case(1)
                temp = (dot_product(x_i,x_j) + 1)
                transform = temp * temp * temp
            ! rbf kernel
            case(2)

            case default
                ! print*, "ERROR: NOT SUPPORTED KERNEL TYPE"
                ! call exit(0)
        end select
        return
    end subroutine
    
    attributes(global) subroutine gpu_construct_kernel_matrix(ddataset, drows, dfeatures, dtype, dn)
        integer,  intent(in) :: drows, dfeatures, dtype,dn
        real, dimension(:,:), intent(in) :: ddataset
        real, dimension(drows) :: rowA, rowB
        ! allocate(rowA(drows))
        ! allocate(rowB(drows))
        ! Perhaps there is a efficiency here either in dataset access or loop iters
        do i=1, ((drows - 1)/dn + 1)
            do j=1, drows
                
                ! call kernel(dataset(i,1:features), dataset(j,1:features), type, kernel_matrix(i,j))
                rowA = ddataset((i-1)+threadidx%x,:)
                rowB = ddataset(j,:)
                call gpu_kernel(rowA, rowB, kernel_matrix((i-1)*dn + threadidx%x,j))
            enddo
        enddo
        call syncthreads()
    end subroutine

    subroutine construct_kernel_matrix_prediction(datasetA, datasetB, result, result_dim)
        integer, intent(in) :: result_dim
        real, dimension(:,:), intent(in) :: datasetA, datasetB
        real, dimension(:,:), intent(out) :: result

        ! Perhaps there is a efficiency here either in dataset access or loop iters
        do i=1, result_dim
            do j=1, rows
                ! call kernel(dataset(i,1:features), dataset(j,1:features), type, kernel_matrix(i,j))
                call kernel(datasetA(j, :), datasetB(i, :), type, result(i,j))
            enddo
        enddo
    end subroutine

    attributes(global) subroutine gpu_vec_to_matrix(matrix, vector)
        real, device,dimension (:), intent(in) :: vector
        real, device,dimension (:,:), intent(out) :: matrix
        integer :: i
        do j = 1, ((rows - 1)/num_cudathreads + 1)
            do i = 1, rows
                matrix(i,(j-1)+threadidx%x) = vector(i) * vector((j-1)+threadidx%x)
            enddo
        enddo
    end subroutine

    attributes(global) subroutine gpu_matrix_dot_product(matrixA, VecB, outVector)
        real, device, dimension(:,:), intent(in) :: matrixA
        real, device, dimension(:), intent(in) :: VecB
        real, device, dimension(:), intent(out) :: outVector
       
        real :: acc
        integer :: i
        do i = 1, rows
            acc = 0.d0
            do j = 1, rows
                acc = acc + (matrixA(i,j) * VecB(j))
            enddo  
            outVector(i) = acc         
        enddo

    end subroutine

    attributes(host) subroutine fit_svm(h_labels, alpha_arr, loss, bias)
        !Inputs
        real, dimension(:), intent(in) :: h_labels
        real, dimension(rows), managed :: labels
        !Local Vars
        real, dimension(:,:), managed, allocatable :: labels_matrix
        integer :: i, j
        real, dimension(:,:), managed, allocatable :: y, alpha_matrix
        real, dimension(:), managed, allocatable :: bias_arr, y_x_alpha, gradient
        ! Inout since alphas change
        real, dimension(:), managed, intent(out) :: alpha_arr
        real, intent(inout) :: bias
        ! Outputs
        real, dimension(:), intent(out) :: loss
        print*, "Init alphas"
        ! Randomize initial alphas
        call random_number(alpha_arr(1:rows))
        ! alpha_arr(1:rows) = 1
        ! open(23,FILE = "./alpha_arr.txt")
        !     write(23, *), alpha_arr
        !     close(23)
        !     return
        labels = h_labels
        ! Init bias, ones, and gradient
        allocate(gradient(rows))
        print*, "Init g"
        bias = 0.d0
        allocate(bias_arr(rows))
        print*, "Init b"
        bias_arr(1:rows) = 0.d0
        allocate(y(rows, rows))
        allocate(labels_matrix(rows,rows))
        allocate(alpha_matrix(rows,rows))

        !Temp vars
        allocate(y_x_alpha(rows))
        print*, "V2m"
        ! calculate matrix form of labels
        call gpu_vec_to_matrix<<<1,num_cudathreads>>>(labels_matrix, labels)
        print*, "lm"
        y(1:rows, 1:rows) = labels_matrix(1:rows, 1:rows) * kernel_matrix(1:rows, 1:rows)

        ! Training
        do i = 1, max_iter
            print*, "Epoch = ", i
            ! Calculate gradient and update alpha
            istat = cudaDeviceSynchronize()
	    call gpu_matrix_dot_product<<<1, num_cudathreads>>>(y, alpha_arr, y_x_alpha)
            print*, "matd"
            ! open(23,FILE = "./yxalp.txt")
            ! write(23, *), y_x_alpha
            ! close(23)
            gradient(1:rows) = 1.d0 - y_x_alpha(1:rows)
            print*, "grad"
            ! open(23,FILE = "./gradient.txt")
            ! write(23, *), gradient
            ! close(23)
            alpha_arr= alpha_arr+ learning_rate * gradient
            print*, "alpha do"
            !For soft margin limit alpha by C
            do j = 1, rows
                if(alpha_arr(j) > C) then
                    alpha_arr(j) = C
                else if (alpha_arr(j) < 0) then
                    alpha_arr(j) = 0
                endif
            enddo
            print*, "vec2mat"
            ! open(23,FILE = "./alpha_arr.txt")
            ! write(23, *), alpha_arr
            ! close(23)
            ! exit
            ! Loss = sum alpha - 1/2 sum_i sum_j alphasij yij K
            call gpu_vec_to_matrix<<<1, num_cudathreads>>>(alpha_matrix, alpha_arr)
            loss(i) = sum(alpha_arr) - 0.5 * sum(alpha_matrix * y)
        enddo
        print*, "bias"
        !Calc bias = avg if alpha within range, yi - aiyiK
        y_x_alpha(1:rows) = alpha_arr(1:rows) * labels(1:rows) 
        print*, "bias calc"
        do j = 1, rows
            if(alpha_arr(j) > 0 .and. alpha_arr(j) < C) then
                bias_arr(j) = labels(j) - dot_product(y_x_alpha, kernel_matrix(:, j))
            endif
        enddo

        bias = 1.d0

    end subroutine

    !yhat = sign(sum alphai yi kernel(xi)T kernel(zi) + b)
    !Figure out how to make modules save arrays
    subroutine predict(orig_dataset, orig_labels, orig_rows, alpha_arr, bias, samples, samples_dim, predictions)
        !!!!!!!!!!!!!!!!!!!!!!Inputs!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        real, dimension(:,:), intent(in)    :: orig_dataset, samples
        real, dimension(:), intent(in)      :: orig_labels, alpha_arr
        real, intent(in)                    :: bias
        integer, intent(in)                 :: orig_rows, samples_dim        !!!!!!!!!!!!!!!!!!!!!!Outputs!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        integer, dimension (:), intent(out) :: predictions
        !!!!!!!!!!!!!!!!!!!!!!Local!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        real, dimension(:), allocatable                  :: y_x_alpha
        real, dimension(:,:), allocatable                :: result

        allocate(y_x_alpha(orig_rows))
        allocate(result(samples_dim, orig_rows))
        y_x_alpha(1:orig_rows) = alpha_arr(1:orig_rows) * orig_labels(1:orig_rows)
        
        call construct_kernel_matrix_prediction(orig_dataset, samples, result, samples_dim)
        do i = 1, samples_dim
            predictions(i) = sign_func(dot_product(y_x_alpha, result(i,:)))
        enddo
    
    end subroutine

    integer function sign_func(input) result (out)
        real :: input

        if(input > 0) then
            out = 1
        else
            out = -1
        endif
    end function

    real function score(labels, prediction, n) result (out)
        integer, dimension(:) :: prediction
        real, dimension(:)    :: labels
        integer               :: i, num_correct
        num_correct = 0
        do i = 1, n 
            if(int(labels(i)) == prediction(i)) then
                num_correct = num_correct + 1
            endif
        enddo
        out = dble(num_correct) / dble(n)
    end function

    integer function allc() result (out)
        allocate(kernel_matrix(rows,rows))
    end function

    integer function set_dim(r, f, m, num_cuda, lr, svmC, t) result(out)
        integer :: r,f, m, num_cuda, t
        real :: lr, svmC
        rows = r 
        features = f
        max_iter = m
        num_cudathreads = num_c
        learning_rate = lr 
        C = svmC
        type = t
    end function
end module gpu_svm

!!!!!!!!!!!!!!!!!!!!!!!!!!Main!!!!!!!!!!!!!!!!!!!
use cudafor
use cublas
use gpu_svm
use data_load
implicit none
integer, parameter :: kernel_type = 1, main_n = 10, main_max_iter = 10,  main_type = 1
real, parameter :: main_learning_rate = 0.0000000002, main_C = 1.d0
integer :: t1,t2,t3,t4
real, dimension(:,:), allocatable :: dataset, raw_dataset, test_dataset, raw_test_dataset
real, device, dimension(:,:), allocatable :: device_dataset
! real, device, dimension(:,:), allocatable :: device_kernel_matrix
real, dimension(:), allocatable :: main_labels, main_alpha_arr, main_loss, test_labels
real, device, dimension(:), allocatable :: device_labels
integer, dimension(:), allocatable :: predictions
! real, allocatable, device :: device_dataset(:,:)
! real, allocatable, device :: device_kernel_matrix(:,:)
integer :: main_rows, main_features, count_max, count_rate, test_rows
integer, device :: device_rows, device_features, device_kernel_type, device_n
integer :: istat
real :: main_bias





device_n = main_n
device_kernel_type = kernel_type
!Setup the cuda devices
istat = cudaSetDevice(0)
print*, istat
call system_clock(count_max = count_max, count_rate=count_rate)
main_rows = determine_row_num("/home/jrmerkel/Documents/Fortran/SVM_CudaFortran/SVM_Example/data/train.txt")
main_features = determine_feature_size("/home/jrmerkel/Documents/Fortran/SVM_CudaFortran/SVM_Example/data/train.txt")
istat = set_dim(main_rows, main_features, main_max_iter, main_n, main_learning_rate, main_C, main_type)
istat = allc()
! allocate the dataset and kernel matrices on host and devices
allocate(raw_dataset(main_rows,main_features))

print*, "Loading Dataset"

call load_data("/home/jrmerkel/Documents/Fortran/SVM_CudaFortran/SVM_Example/data/train.txt", raw_dataset, main_rows, main_features)
! allocate arr and matrices
allocate(dataset(main_rows,main_features))
allocate(device_dataset(main_rows,main_features))
allocate(device_labels(main_rows))
allocate(main_labels(main_rows))
allocate(main_alpha_arr(main_rows))
allocate(main_loss(main_max_iter))

print*, "Parsing labels"
call split_labels(raw_dataset, dataset, main_labels, main_rows, main_features)
call normalize_labels(main_labels, main_rows)

device_dataset = dataset
device_labels = main_labels

print*, "Constructing Kernel"
! h = 0; iarr = h


! call system_clock(t4)
istat = cudaGetLastError()
print *, cudaGetErrorString(istat)
! call system_clock(t1)
call gpu_construct_kernel_matrix <<<1,main_n>>>(device_dataset, device_rows, device_features, device_kernel_type, device_n)
istat = cudaGetLastError()
print *, cudaGetErrorString(istat)
istat = cudaDeviceSynchronize()
print*, "moving matrix"
! istat = cudaMemcpy(kernel_matrix, device_kernel_matrix, rows*rows)
! istat = cudaMemcpy2D(dataset, device_dataset, rows * features, cudaMemcpyDeviceToHost)
! call system_clock(t2)
print*, "fit Svm"
call fit_svm(main_labels, main_alpha_arr, main_loss, main_bias)

print*, "fit done"
istat = cudaGetLastError()
print *, cudaGetErrorString(istat)
! load test dataset
test_rows = determine_row_num("/home/jrmerkel/Documents/Fortran/SVM_CudaFortran/SVM_Example/data/test.txt")
! allocate the dataset
allocate(raw_test_dataset(test_rows,main_features))
allocate(test_dataset(test_rows,main_features))
allocate(predictions(test_rows))
print*, "Loading test Data"
istat = cudaGetLastError()
print *, cudaGetErrorString(istat)
call load_data("/home/jrmerkel/Documents/Fortran/SVM_CudaFortran/SVM_Example/data/test.txt", raw_test_dataset, test_rows, main_features)
print*, "Predicting"
! Get the prediction array
allocate(test_labels(test_rows))
istat = cudaGetLastError()
print *, cudaGetErrorString(istat)
call split_labels(raw_test_dataset, test_dataset, test_labels, test_rows, main_features)
call normalize_labels(test_labels, test_rows)

! open(23,FILE = "./test_data.txt")
! write(23, *), test_dataset
! close(23)
istat = cudaGetLastError()
print *, cudaGetErrorString(istat)
call predict(dataset, main_labels, main_rows, main_alpha_arr, main_bias, test_dataset, test_rows, predictions)
! call predict(dataset, labels, rows, features, alpha_arr, bias, dataset, rows, kernel_type, predictions)
print*, "Writing"
! open(23,FILE = "./predictions.txt")
! write(23, *), predictions
! close(23)

! open(23,FILE = "./alpha_arr.txt")
! write(23, *), alpha_arr
! close(23)

! open(23,FILE = "./bias.txt")
! write(23, *), bias
! close(23)


! open(23,FILE = "./loss.txt")
! write(23, *), loss
! close(23)


istat = cudaGetLastError()
print *, cudaGetErrorString(istat)
! Score 
print*, "predicts ", score(test_labels, predictions, test_rows), "%"

istat = cudaGetLastError()
print *, cudaGetErrorString(istat)
! print*,"GPU TIME = ", t2-t1
! print*, "CPU TIME = ", t4-t3
end



