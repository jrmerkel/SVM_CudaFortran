module unittests
    use svm
    use gpu_svm
    use cudafor
contains
    
    integer function test_matrix_dot_product() result (out)
        
        real, dimension(3,3) :: matrixA
        real, dimension(3) :: VecB, outVector
        integer :: n, i, j
        n = 3
        do i = 1, n 
            do j = 1, n
                matrixA(i,j) = i*3 -3 + j
            enddo
            VecB(i) = i + 1
        enddo
        call matrix_dot_product(matrixA, VecB, n, outVector)
        if(outVector(1) == 20.00000 .and. outVector(2) == 47.00000 .and. outVector(3) == 74.00000) then
            out = 1
        else
            out = 0
        endif
       
    end function

    integer function test_vect_to_matrix() result (out)
        
    real, dimension(3,3) :: outMatrix
    real, dimension(3) :: VecA
    integer :: n, i, j
    n = 3
    do i = 1, n 
        VecA(i) = i + 1
    enddo
    call vec_to_matrix(outMatrix, VecA, n)
    do i = 1, n
        if(outMatrix(i,1) == (i+1) * 2 .and. outMatrix(i,2) == (i+1) * 3 .and. outMatrix(i,3) == (i+1) * 4) then
            out = 1
        else
            out = 0
            return 
        endif
    enddo
    end function

    attributes(host) integer function gpu_test_vect_to_matrix() result (out)
        
    real,managed, dimension(3,3) :: outMatrix
    real,managed, dimension(3) :: VecA
    integer :: n, i, j
    n = 3
    do i = 1, n 
        VecA(i) = i + 1
    enddo
   x = set_dim(3, 3, 1, 10, 0.001, 1.00, 1)

    call gpu_vec_to_matrix<<<1,3>>>(outMatrix, VecA)
    do i = 1, n
        if(outMatrix(i,1) == (i+1) * 2 .and. outMatrix(i,2) == (i+1) * 3 .and. outMatrix(i,3) == (i+1) * 4) then
            out = 1
        else
            out = 0
            return 
        endif
    enddo
    end function

    attributes(host) integer function gpucpu_test_vect_to_matrix() result (out)
        
    real,managed, dimension(77,77) :: outMatrix_cpu, outMatrix_gpu
    real,managed, dimension(77) :: VecA
    
    integer :: n, i, j
    n = 77
    do i = 1, n 
        VecA(i) = i + 1
    enddo

    i = set_dim(77, 3, 1, 10, 0.001, 1.00, 1)
    call gpu_vec_to_matrix<<<1,10>>>(outMatrix_gpu, VecA)
    call vec_to_matrix(outMatrix_cpu, VecA, n)
    do i = 1, n
        do j = 1, n

		if(outMatrix_gpu(j,i) == outMatrix_cpu(j,i)) then
			out = 1
		else
			out = 0
			return
		endif		

	enddo
    enddo
    end function

    attributes(host) integer function gpucpu_test_matrix_dot() result (out)
        
    real,managed, dimension(77) :: outVector_cpu, outVector_gpu
    real,managed, dimension(77) :: VecB
   real, managed, dimension(77,77) :: MatrixA
    integer :: n, i, j
    n = 77
     do i = 1, n 
        Vecb(i) = i + 1
	do j = 1, n
		MatrixA(j,i) = i+1
	enddo
    enddo 
    i = set_dim(77, 3, 1, 10, 0.001, 1.00, 1)
    call gpu_matrix_dot_product<<<1,10>>>(MatrixA,VecB,outVector_gpu)
    call matrix_dot_product(MatrixA,VecB,n,outVector_cpu)
    do i = 1, n
	if(outVector_gpu(i) == outVector_cpu(i)) then
		out = 1
	else
		out = 0
		return
	endif			
    enddo
    end function
end module

use svm
use gpu_svm
use unittests
integer :: x
x = cudaSetDevice(0)
x = set_dim(3, 3, 1, 10, 0.001, 1.00, 1)

x = 1
if(test_matrix_dot_product() == 0) then
    print*, "Matrix Dot Product fails"
    x=0
endif

if(test_vect_to_matrix() == 0) then 
    print*, "Vect to Matrix (np.outer)  fails"
    x = 0
endif

if(gpu_test_vect_to_matrix() == 0) then 
    print*, "GPU Vect to Matrix (np.outer)  fails"
    x = 0
endif

if(gpucpu_test_vect_to_matrix()  == 0) then 
    print*, "GPU and CPU Vect to Matrix (np.outer) mismatch"
    x = 0
endif

if(x == 1)print*,"All Tests Pass" 
end
